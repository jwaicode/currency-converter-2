---
description: 
globs: 
alwaysApply: true
---
Architecture Overview

Project Structure (React Native + Expo)
/currency-converter-app
├── /assets
│   └── currencies.json — Static currency metadata (ISO codes, names, aliases)
├── /components
│   ├── CurrencyRow.tsx — UI for a single currency row
│   ├── SearchModal.tsx — Modal for adding currencies
│   └── AddCurrencyButton.tsx — Plus button component
├── /screens
│   └── MainScreen.tsx — Single app screen with all logic (*may later split if app grows*)
├── /hooks
│   ├── useExchangeRates.ts — Manages API fetch + AsyncStorage caching
│   └── useCurrencyConverter.ts — Contains conversion logic (active ➝ USD ➝ others)
├── /utils
│   └── filterCurrencies.ts — Filters search by ISO/alias
├── /store
│   └── storage.ts — Manages AsyncStorage helpers
├── App.tsx — Entry point
└── constants.ts — API config, static limits, etc.

Key Data Models

currencies.json
[
  {
    "iso": "GBP",
    "name": "British Pound",
    "aliases": ["british", "pound", "sterling", "gbp"]
  },
  {
    "iso": "THB",
    "name": "Thai Baht",
    "aliases": ["thb", "baht", "thai"]
  }
]

Exchange Rate Object (stored in AsyncStorage)
{
  rates: {
    "GBP": 0.79,
    "THB": 36.4,
    "EUR": 0.91
  },
  lastUpdated: 1719330033
}

Selected Currencies (also stored in AsyncStorage)
["GBP", "THB", "EUR"]

API Integration  
Endpoint: Exchange Freaks (e.g. https://api.exchangerate-api.com/v4/latest/USD)

- Fetched only if no data exists or if data is >24h old.  
- Fetched rates are stored and reused until expired.

Architecture Style  
- Modular, clean architecture.  
- Centralized conversion logic via custom hooks.  
- UI decoupled from business logic and side effects.  
- Hooks manage persistence and computation.  
- Component-based UI.

State Persistence  
- Persisted: currency selections, exchange rates.  
- Not persisted: numeric inputs (reset each session).

