---
description: description: Guidance for safe automated Git tasks.
globs: 
alwaysApply: false
---
rule_type: agentRequested
name: git-automation
description: Guidance for safe automated Git tasks.

# git-automation.mdc

Purpose
NOTE: All Git actions must be executed through the GitHub MCP tool suite (`mcp_GitHub_*`). This file defines the branch, commit-message, and safety conventions that those actions must follow.
Give Cursor explicit, repeatable guidance for everyday Git tasks so that:
• Common actions (stage, commit, branch, push, PR) are automated safely.
• Each step is reported back to the user for transparency.
• History remains clean, reviewable, and aligned with best-practice Git workflows.

╭─ 1. Commit Hygiene
│ • One logical change per commit; ensure the code compiles/tests before committing.
│ • Use imperative, present-tense summaries, ≤ 50 chars.
│ • Add a body when it helps answer "why?" or links an Issue/PR.
│ • Immediately after each commit, automatically push to the same branch on the remote repository.
│ • Never commit generated artifacts (see .gitignore) or secrets (.env, *.pem).
│ • On Windows CMD/PowerShell, create multi-paragraph messages by passing multiple `-m` flags (one per paragraph). Avoid literal newlines inside quoted strings.
╰───────────────────────────────────────

╭─ 2. Branching Model
│ • default branch = main
│ • feature/*  for new features
│ • fix/*      for bug fixes
│ • chore/*    for docs, tooling, dev-ops
│ • Cursor must ask before force-pushing or rewriting public history.
╰───────────────────────────────────────

╭─ 3. Typical Flows Cursor May Automate
│ • init-commit:  create initial project skeleton.
│ • feature-start: create branch, apply user-approved edits, commit.
│ • feature-finish: push branch, open PR, paste link to user.
│ • hotfix: patch on main ➝ tag release.
╰───────────────────────────────────────

╭─ 4. Safety Nets
│ • Cursor MUST NOT perform `reset --hard`, `push --force`, branch deletions, or any other destructive git action. Only additive operations (new commits, new branches) are allowed.
│ • If tests/linters fail, abort commit & show errors.
╰───────────────────────────────────────

╭─ 5. Status Reporting
│ After every Git action, echo:
│   • branch name + short SHA
│   • files touched
│   • next recommended step (e.g., 'run npm test', 'open PR')
╰───────────────────────────────────────

╭─ 6. .gitkeep File Usage and Removal Rules
│ • .gitkeep files should ONLY be used temporarily during initial project scaffolding to preserve empty directory structure.
│ • Once directories contain actual content files, .gitkeep files MUST be removed immediately.
│ • Never commit .gitkeep files in directories that already have meaningful content.
│ • When cleaning up repositories, proactively search for and remove unnecessary .gitkeep files.
│ • If a directory becomes empty again, consider whether it's still needed before adding .gitkeep back.
╰───────────────────────────────────────

╭─ 7. Dual-Repo Syncing Rules
│ • For **project files**: commit & push to the project repository (`origin`).
│ • For **thinking-rules files** located in `.cursor/rules/agent/`: in addition to the project commit, push those same files to `jwaicode/cursorrules-repo` on the matching branch (typically `main`).
│ • Do **not** push project context or workhistory files to the cursorrules-repo.
╰───────────────────────────────────────





