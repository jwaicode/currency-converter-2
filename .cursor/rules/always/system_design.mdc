---
description: 
globs: 
alwaysApply: false
---
rule_type: always
name: system_design
description: High-level architecture overview plus core functions and hooks for the Personal Currency Converter project.

# Architecture Overview

Project Structure (React Native + Expo)
Runtime Versions: Expo SDK 53 (React 19, React Native 0.79)
/currency-converter-app
├── /assets
│   └── currencies.json — Static currency metadata (ISO codes, names, aliases)
├── /components
│   ├── CurrencyRow.tsx — UI for a single currency row
│   ├── SearchModal.tsx — Modal for adding currencies
│   └── AddCurrencyButton.tsx — Plus button component
├── /screens
│   └── MainScreen.tsx — Single app screen with all logic (*may later split if app grows*)
├── /hooks
│   ├── useExchangeRates.ts — Manages API fetch + AsyncStorage caching
│   └── useCurrencyConverter.ts — Contains conversion logic (active ➝ USD ➝ others)
├── /utils
│   └── filterCurrencies.ts — Filters search by ISO/alias
├── /store
│   └── storage.ts — Manages AsyncStorage helpers
├── App.tsx — Entry point
└── constants.ts — API config, static limits, etc.

## Key Data Models

currencies.json
```
[
  {
    "iso": "GBP",
    "name": "British Pound",
    "aliases": ["british", "pound", "sterling", "gbp"]
  },
  {
    "iso": "THB",
    "name": "Thai Baht",
    "aliases": ["thb", "baht", "thai"]
  }
]
```

Exchange Rate Object (stored in AsyncStorage)
```
{
  rates: {
    "GBP": 0.79,
    "THB": 36.4,
    "EUR": 0.91
  },
  lastUpdated: 1719330033
}
```

Selected Currencies (also stored in AsyncStorage)
```
["GBP", "THB", "EUR"]
```

### API Integration
Endpoint: Exchange Freaks (e.g. https://api.exchangerate-api.com/v4/latest/USD)

- Fetched only if no data exists or if data is >24h old.
- Fetched rates are stored and reused until expired.

### Architecture Style
- Modular, clean architecture.
- Centralized conversion logic via custom hooks.
- UI decoupled from business logic and side effects.
- Hooks manage persistence and computation.
- Component-based UI.

### State Persistence
- Persisted: currency selections, exchange rates.
- Not persisted: numeric inputs (reset each session).

---

# Core Functions & Hooks

## addCurrency(isoCode: string): void
Adds a new currency to the user's selection.
- Checks AsyncStorage list; adds if not present.
- Updates AsyncStorage.
- Updates selectedCurrencies state (which re-renders the currency list).

## removeCurrency(isoCode: string): void
Removes a currency from the selection.
- Reads and updates AsyncStorage list.
- Updates selectedCurrencies state (which re-renders the currency list).

## convertAllValues(activeIso: string, activeValue: number, rates: Record<string, number>): Record<string, number | null>
Converts the active currency to all selected currencies.
- Converts activeValue → USD → other currencies.
- If `rates[activeIso] === 0` or missing, returns all nulls.
- Returns rounded values.
- If rate is missing, returns null for that ISO.

## useExchangeRates(): { rates: Record<string, number>, isStale: boolean }
Handles exchange rate loading, caching, and freshness.
- Checks AsyncStorage for rates + lastUpdated.
- If missing or stale (>24h), fetches new data.
- Logs errors on failure.
- Falls back to last known good data if needed.

## filterCurrencies(query: string): CurrencyMeta[]
Filters static currency metadata (currencies.json) by:
- ISO code (e.g., "GBP")
- Name (e.g., "British Pound")
- Alias (e.g., "sterling")
- Case-insensitive match.

## validateNumericInput(input: string): boolean
Validates that an input string is numeric:
- Only digits + decimal point.
- Max length = 12.
- Does not mutate input.
- UI layer should separately truncate/sanitize inputs if needed.







