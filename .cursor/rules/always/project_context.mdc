---
description: 
globs: 
alwaysApply: false
---
rule_type: always
name: project_context
description: Project purpose, MVP scope, constraints, pseudocode, and roadmap for the Personal Currency Converter.

# App Overview

App Name: Personal Currency Converter

## Core Purpose  
A single-screen iOS app that enables the user (a frequent traveler) to convert a currency amount into multiple other selected currencies instantly. The app is optimized for quick, offline-friendly usage and provides real-time conversions using exchange rates updated once every 24 hours.

## Target Audience  
This app is for personal use by the developer, primarily during international travel. The user values speed, simplicity, and clean design with no clutter or distractions. It is not intended for public release at this stage.

## Key Features (MVP)
- Single-screen interface listing user-selected currencies.  
- Search modal to add new currencies using ISO codes or aliases.  
- Tap any currency row to activate it as the input field. Only one currency can be edited at a time.  
- Live value conversion between multiple currencies.  
- Exchange Freaks API integration with rates updated every 24 h.  
- Persistent storage of selected currencies and latest exchange rates.  
- Reset input behavior: values reset on app reload, but currency selections and rates persist.  
- Manual currency removal using an "X" or trash icon.  
- Warn user if exchange rates are older than 24 h.

## Technology Stack
- Expo SDK 53 (React 19, React Native 0.79)  
- AsyncStorage for local persistence  
- Static JSON file for currency metadata (ISO, names, aliases)  
- Exchange Freaks API for live exchange rates  

## Design Philosophies
- Clean Architecture: Clear separation of concerns across UI, logic, and data layers.  
- Component-driven development: Reusable, isolated, testable UI components.  
- Minimal UI/UX: Fast, clutter-free experience suitable for on-the-go usage.

## Known Constraints  
- API updates only once per 24 hours on free tier.  
- No user authentication.  
- No gesture or swipe UI for MVP.

---

# Key Algorithmic Pseudocode

```text
addCurrency(isoCode)
  IF isoCode NOT in storedCurrencyList:
    Append isoCode to storedCurrencyList
    Save to AsyncStorage
    Update selectedCurrencies state

removeCurrency(isoCode)
  Remove isoCode from storedCurrencyList
  Save updated list to AsyncStorage
  Update selectedCurrencies state

convertAllValues(activeIso, activeValue, rates)
  IF rates[activeIso] == 0 OR NOT EXISTS:
    RETURN resultMap where all values = null
  activeToUSD = activeValue / rates[activeIso]
  resultMap = {}
  FOR iso IN selectedCurrencies:
    IF iso != activeIso:
      IF rates[iso] exists:
        resultMap[iso] = round(activeToUSD * rates[iso], 2)
      ELSE:
        resultMap[iso] = null
    ELSE:
      resultMap[iso] = activeValue
  RETURN resultMap

useExchangeRates()
  ON mount:
    GET savedRates + lastUpdated from AsyncStorage
    IF no rates OR lastUpdated > 24h:
      TRY fetch newRates from API
        IF success:
          Save newRates + timestamp
          RETURN { rates: newRates, isStale: false }
        ELSE IF savedRates:
          Log error
          RETURN { rates: savedRates, isStale: true }
        ELSE:
          RETURN { rates: {}, isStale: true }
    ELSE:
      RETURN { rates: savedRates, isStale: false }

filterCurrencies(query)
  queryLower = query.toLowerCase()
  RETURN currencies WHERE
    isoCode OR name OR aliases CONTAIN queryLower

validateNumericInput(input)
  IF input contains invalid characters:
    RETURN false
  IF length > 12:
    RETURN false
  IF parses to float:
    RETURN true
  ELSE:
    RETURN false
```

---

# MVP Roadmap (‚úÖ = complete)

1. ‚úÖ **Phase 1 ‚Äì Project Setup & Static Data**  
    ‚Ä¢ Init React Native project with Expo Go.  
    ‚Ä¢ Define folder structure.  
    ‚Ä¢ Add static `currencies.json`.  
    ‚Ä¢ Build and test `filterCurrencies`.

2. ‚úÖ **Phase 2 ‚Äì UI Layout & Input System**  
    ‚Ä¢ Build main screen layout.  
    ‚Ä¢ Add dynamic currency row list.  
    ‚Ä¢ Add "+" button.  
    ‚Ä¢ Dismiss keyboard on background tap.  
    ‚Ä¢ Add `CurrencyRow` component.  
    ‚Ä¢ Enable single editable row state.  
    ‚Ä¢ Store active ISO + input value.

3. ‚úÖ **Phase 3 ‚Äì Search Modal**  
    ‚Ä¢ Build modal for adding currencies.  
    ‚Ä¢ Hook up `filterCurrencies` with alias support.  
    ‚Ä¢ Connect selection to `addCurrency`.  
    ‚Ä¢ Persist `selectedCurrencies` in AsyncStorage.

4. ‚úÖ **Phase 4 ‚Äì Conversion System**  
    ‚Ä¢ Add `useExchangeRates` hook.  
    ‚Ä¢ Fetch and store rates (24 h logic).  
    ‚Ä¢ Show "stale rate" warning if needed.  
    ‚Ä¢ Implement `convertAllValues`.  
    ‚Ä¢ Display converted values in rows.

5. ‚úÖ **Phase 5 ‚Äì Deletion + Input Handling**  
    ‚Ä¢ Add remove button (calls `removeCurrency`).  
    ‚Ä¢ Validate user input using `validateNumericInput`.  
    ‚Ä¢ Handle edge cases (0, large, partials).

6. ‚è≥ **Phase 6 ‚Äì Polish & QA**  
    ‚Ä¢ Confirm persistence works across app restarts.  
    ‚Ä¢ Simulate API failure fallback.  
    ‚Ä¢ Ensure stale-rate indicator behaves correctly.  
    ‚Ä¢ Final UI tweaks: spacing, naming, clarity.

7. üß© **Post-MVP Notes**  
    Refactor conversion and persistence logic into a global store (e.g., Zustand or Context) if app complexity increases.






