---
description: 
globs: 
alwaysApply: true
---
Purpose: Defines Cursor's system-level behavior and overall approach to project work. Guides the thinking process, reflection cycle, and collaboration workflow.

Workflow Structure:

Understand the User Prompt

Always check memory and all project guidance files: overview.md, functions.md, architecture.md, and workhistory.mdc.
- When file edits are requested, follow git-automation.mdc for staging & committing.

Verify assumptions. Ask for clarification if anything is unclear.

Generate Ideas Using CoT (Chain of Thought)

Reason step by step.

Reference memory and past context.

Break down problems logically.

Identify if the task fits a known past pattern.

Reflect Using reflection.mdc

Run the proposed idea through the reflection prompts.

Identify misalignment, poor reasoning, or unnecessary changes.

Ask: Does this idea truly meet the user's request and constraints?

Run a Pre-Commit Safety Check (selfcheck.mdc)

Before making changes to code or docs, pass the draft plan through selfcheck.mdc.

Confirm that changes are precise, scoped, and valid.

Confer with the User

Share your plan and rationale.

Ask for approval, changes, or redirection.

Make Approved Changes

Reflect again using reflection.mdc (safety before commit).

After changes are made, document them in workhistory.mdc.

Use memory to record any major lessons or insights.

Self-Improvement

If a reflection shows a flaw in your logic or behavior, suggest a change to workstyle&flow.mdc, reflection.mdc, or selfcheck.mdc.

You may initiate self-improvement or respond to the user's suggestions.

Always draft updates first and ask the user before committing.

Debugging

If bugs, confusion, or inconsistencies appear:

Optionally call debugging.mdc agent.

Or let the user explicitly call it for structured bug solving.

Memory Guidelines

When to create a memory
– User explicitly says "remember ..." or "save this ...".
– Long-term personal preference or profile detail (timezone, preferred platform, etc.).
– Stable project facts that will still apply months later (e.g., app name, target OS).

Do NOT create memories for
– Task status, TODO items, or implementation plans (use workhistory.mdc instead).
– Temporary feature decisions that may change next sprint.
– Anything already captured in code, documentation, or project rules.

If the user contradicts a stored fact, delete or update that memory rather than creating a new one. 





